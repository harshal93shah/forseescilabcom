<?xml version="1.0" encoding="UTF-8"?>

<!--
 *
 * This help file was generated from HelicalDeinterleaver.sci using help_from_sci().
 *
 -->

<refentry version="5.0-subset Scilab" xml:id="HelicalDeinterleaver" xml:lang="en"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:ns3="http://www.w3.org/1999/xhtml"
          xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:scilab="http://www.scilab.org"
          xmlns:db="http://docbook.org/ns/docbook">

  <refnamediv>
    <refname>HelicalDeinterleaver</refname>
    <refpurpose>This fn restoree ordering of symbols using helical array. It also returns the current state of arrays as matrix and the value of next index from which we would get output</refpurpose>
  </refnamediv>


<refsynopsisdiv>
   <title>Calling Sequence</title>
   <synopsis>
   [y,state,index,state2] = HelicalDeinterleaver(in,col,N,stp,inist,stindex,inist2)
   [y,state,index,state2] = HelicalDeinterleaver(in,col,N,stp,inist,stindex)
   [y,state,index,state2] = HelicalDeinterleaver(in,col,N,stp,inist)
   </synopsis>
</refsynopsisdiv>

<refsection>
   <title>Parameters</title>
   <variablelist>
   <varlistentry><term>in:</term>
      <listitem><para>input- can be any  vector. Its length should be equal to col * N</para></listitem></varlistentry>
   <varlistentry><term>col:</term>
      <listitem><para>Number of columns-The number of columns, C, in the helical array.</para></listitem></varlistentry>
   <varlistentry><term>N:</term>
      <listitem><para>The group size, N, of each group of input symbols.</para></listitem></varlistentry>
   <varlistentry><term>inist:</term>
      <listitem><para>Initialstate- Initial conditions of helical array.Specify the initial values in each shift register as a numeric scalar value(in case of 5 args) or a matrix. Intially pass a scalar for subsequent calls pass the state returned  from previous calls</para></listitem></varlistentry>
   <varlistentry><term>inist2:</term>
      <listitem><para>intial state 2</para></listitem></varlistentry>
   <varlistentry><term>stindex:</term>
      <listitem><para>start index- which shift register will give first ouput. it should be scalar less than no of col.Intially pass 1 subsequent cause pass the index returned  from previous calls</para></listitem></varlistentry>
   </variablelist>
</refsection>

<refsection>
   <title>Description</title>
   <para>
The Helical Deinterleaver block permutes the symbols in the input signal by placing them in an array row by row and then selecting groups in a helical fashion to send to the output port.
The block uses the array internally for its computations. If C is the Number of columns in helical array parameter, then the array has C columns and unlimited rows. If N is the Group size parameter, then the block accepts an input of length C·N at each time step and inserts them into the next N rows of the array. The block also places the Initial condition parameter into certain positions in the top few rows of the array (not only to accommodate the helical pattern but also to preserve the vector indices of symbols that pass through the Helical Interleaver and Helical Deinterleaver blocks in turn).
The output consists of consecutive groups of N symbols. Counting from the beginning of the simulation, the block selects the kth output group in the array from column k mod C. The selection is helical because of the reduction modulo C and because the first symbol in the kth group is in row 1+(k-1)*s, where s is the Helical array step size parameter.
This block accepts a column vector input signal containing C·N elements.
</para>
</refsection>

<refsection>
   <title>Examples</title>
   <programlisting role="example"><![CDATA[
y = HelicalDeinterleaver([1 0 0 2 3 0],3,2,1,0)
   ]]></programlisting>
</refsection>

<refsection>
   <title>Authors</title>
   <simplelist type="vert">
   <member>Harshal Shah</member>
   </simplelist>
</refsection>
</refentry>
